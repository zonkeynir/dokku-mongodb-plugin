#!/bin/bash
[[ $DOKKU_TRACE ]] && set -x

consolelog () {
  echo "$1" | tee -a ./install.log
  return 0
}

vercomp () {
  if [[ $1 == $2 ]]
  then
    return 0
  fi
  local IFS=.
  local i ver1=($1) ver2=($2)
  # fill empty fields in ver1 with zeros
  for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
  do
    ver1[i]=0
  done
  for ((i=0; i<${#ver1[@]}; i++))
  do
    if [[ -z ${ver2[i]} ]]
    then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    fi
    if ((10#${ver1[i]} > 10#${ver2[i]}))
    then
      return 1
    fi
    if ((10#${ver1[i]} < 10#${ver2[i]}))
    then
      return 2
    fi
  done
  return 0
}

# Remove the log file if it already exists
rm -f ./install.log
consolelog "Plugin Install Dokku MongoDB"
consolelog ""

# Build MongoDB image
consolelog "-- Build MongoDB Image"
if [[ $(docker images) == *jeffutter/mongodb* ]]
then
  MONGODB_VERSION=$(docker run --rm jeffutter/mongodb mongod --version | egrep -o '[[:digit:]\.]*'|head -n1)

  consolelog "MongoDB Version: $MONGODB_VERSION"

  vercomp "$MONGODB_VERSION" '2.5.9999999999999999'
  if [[ $? == 1 ]]; then
    db_image="jeffutter/mongodb"
  else
    db_image="jeffutter/mongodb:2.4"
  fi
else
  db_image="jeffutter/mongodb"
fi

consolelog "db_image: $db_image"
docker pull "$db_image"

if [[ -f /etc/init/mongodb.conf ]]
then
  previous_mongo_install=true
else
  previous_mongo_install=false
fi
consolelog "previous_mongo_install= $previous_mongo_install"

apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10
echo deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen > /etc/apt/sources.list.d/10gen.list
apt-get update
apt-get -y install mongodb-org-shell mongodb-org-tools

if [ $previous_mongo_install = false ]; then
  echo 'ENABLE_MONGODB="no"' > /etc/default/mongodb
fi

consolelog ""
if [[ ! -d "$DOKKU_ROOT/.mongodb" ]]; then
  consolelog "-- Run Setup"
  mkdir -p "$DOKKU_ROOT/.mongodb/data"

  admin_pass="mongo"
  echo $admin_pass > "$DOKKU_ROOT/.mongodb/admin_pw"

  chown -R dokku: "$DOKKU_ROOT/.mongodb"

  id=$(docker run -p 27017 -d -v "$DOKKU_ROOT/.mongodb/data":/tmp/mongo "$db_image" /usr/bin/mongod --dbpath=/tmp/mongo)
  mongodb_ip=$(docker port ${id} 27017 | awk '{split($0,a,":"); print a[1]}')
  mongodb_port=$(docker port ${id} 27017 | awk '{split($0,a,":"); print a[2]}')
  if [[ $mongodb_ip = "0.0.0.0" ]]; then
    mongodb_ip=127.0.0.1
  fi

  consolelog "id: $id"
  consolelog "mongodb_ip: $mongodb_ip"
  consolelog "mongodb_port: $mongodb_port"

  consolelog ""
  consolelog "-- Connecting to server and creating admin user"
  admin_success=false
  loop_count=0
  while [ $loop_count -lt 100 ];
  do
    sleep 2 # give mongodb some time to start
    consolelog ""
    if [ $((loop_count%2)) -eq 1 ]; then
        consolelog "-- Try [addUser] to create admin"
        create_output=$(mongo $mongodb_ip:$mongodb_port/admin --eval "db.addUser({user: \"admin\", pwd: \"${admin_pass}\", roles: [ \"root\" ]})")
    else
        consolelog "-- Try [createUser] to create admin"
        create_output=$(mongo $mongodb_ip:$mongodb_port/admin --eval "db.createUser({user: \"admin\", pwd: \"${admin_pass}\", roles: [ \"root\" ]})")
    fi

    if [[ $? == 0 ]]; then
      consolelog "Admin user created successfully"
      admin_success=true
      break
    else
      consolelog "$create_output"
      loop_count=$((loop_count + 1))
    fi
  done
  docker stop "$id"

  if [ "$admin_sucess" = true ]; then
    consolelog "Unable to create the admin user!"
  fi
else
  consolelog ".mongodb found -- skip setup"
fi
consolelog
consolelog "Plugin Install Dokku MongoDB Completed"
